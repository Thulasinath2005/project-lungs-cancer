# -*- coding: utf-8 -*-
"""LUNG CANCER DETECTION - THULASINATH

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vMGGEEC_8pzgrXcRUfymkMhil53uSQHA
"""

import os
os.environ['KAGGLE_CONFIG_DIR'] = '/contant'

#!kaggle competitions download -c titanic
!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

!unzip \*.zip && rm* .zip

import numpy as np
import matplotlib.pyplot as plt
import os
import math
import shutil
import glob

"""# **COUNT THE DATA**"""

ROOT_DIR = "/content/chest_xray"
number_of_images = {}

for dir in os.listdir(ROOT_DIR ):
  number_of_images[dir] = len(os.listdir(os.path.join(ROOT_DIR, dir)))

number_of_images.items()

len(os.listdir("/content/chest_xray"))

!pip install -q keras
!pip install-q kernal_size

"""# MODEL BUILDING

"""

from keras.layers import Conv2D, MaxPool2D, Dropout, Flatten, Dense, BatchNormalization, GlobalAvgPool2D
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
import keras

"""# CNN MODEL"""

model = Sequential()

model.add(Conv2D(filters= 16 , kernel_size= (3,3), activation= 'relu', input_shape = (224,224,3) ))

model.add(Conv2D(filters= 36 , kernel_size= (3,3), activation= 'relu'))
model.add(MaxPool2D(pool_size= (2,2)))

model.add(Conv2D(filters= 64 , kernel_size= (3,3), activation= 'relu'))
model.add(MaxPool2D(pool_size= (2,2)))

model.add(Conv2D(filters= 128 , kernel_size= (3,3), activation= 'relu'))
model.add(MaxPool2D(pool_size= (2,2)))

model.add(Dropout(rate= 0.25))

model.add(Flatten())
model.add(Dense(units=64, activation= 'relu'))
model.add(Dropout(rate= 0.25))
model.add(Dense(units= 1, activation= 'sigmoid'))

model.summary()

model.compile(optimizer='adam', loss= keras.losses.binary_crossentropy, metrics=['accuracy'])

"""# PREPARING OUR DATA USING DATA GENERATOR"""

def preprocessingImages1(path):
  "input :path"
  "output :pre processed images"

  image_data = ImageDataGenerator(zoom_range= 0.2, shear_range=0.2, rescale= 1/225, horizontal_flip= True)
  image = image_data.flow_from_directory(directory = path, target_size = (224,224), batch_size = 32, class_mode= 'binary')
  return image

path = "/content/chest_xray/train"
train_data = preprocessingImages1(path)

def preprocessingImages2(path):
  "input :path"
  "output :pre processed images"

  image_data = ImageDataGenerator(rescale= 1/225)
  image = image_data.flow_from_directory(directory = path, target_size = (224,224), batch_size = 32, class_mode= 'binary')
  return image

path = "/content/chest_xray/test"
test_data = preprocessingImages2(path)

path = "/content/chest_xray/val"
val_data = preprocessingImages2(path)

"""# EARLY STOPPING AND MODEL CHECK POINT"""

from keras.callbacks import ModelCheckpoint, EarlyStopping

#early stopping

es = EarlyStopping(monitor="val_accuracy", min_delta= 0.01, patience= 3, verbose= 1, mode = 'auto')

#model check point
mc = ModelCheckpoint(monitor="val_accuracy", filepath="./bestmodel.h5", verbose= 1, save_best_only= True, mode = 'auto')

cd = [es,mc]

"""# MODEL TRANING"""

hs = model.fit_generator(generator= train_data,
                         steps_per_epoch= 8,
                         epochs= 30,
                         verbose= 1,
                         validation_data= val_data,
                         validation_steps= 16,
                         callbacks= cd  )

#KeyError: 'val_accuracy'
#validation_data= val_data

"""# MODEL GRAPHICAL INTERPRETATION

"""

h = hs.history
h.keys()

import matplotlib.pyplot as plt
plt.plot(h['accuracy'])
plt.plot(h['loss'], c = "red")

plt.title("acc vs val.acc")
plt.show()

"""# MODEL ACCURACY"""

#from keras.models import load_model
#model = load_model("/content/bestmodel.h5")
import tensorflow as tf

model = tf.keras.models.load_model("/content/bestmodel.h5")

acc = model.evaluate_generator(test_data)[1]

print(f"the accuracy of our model is {acc*100} %")

!pip install keras.preprocessing

from keras.preprocessing.image import load_img, img_to_array

train_data.class_indices

from keras.models import load_model
import tensorflow as tf

model = tf.keras.models.load_model("/content/bestmodel.h5")
# Load the image with the desired target size
path = "/content/chest_xray/val/PNEUMONIA/person1950_bacteria_4881.jpeg"
img = load_img(path, target_size=(224, 224))

# Convert the image to a NumPy array
import_arr = img_to_array(img)

# Normalize the image
import_arr = import_arr / 225.0

# Show the image
plt.imshow(input_arr[0])
plt.show()

# Add an extra dimension to the input data
#input_arr = np.expand_dims(import_arr, axis=0)

# Make sure the input data type is float32
input_arr = input_arr.astype(np.float32)

# Predict the class of the input image
pred = model.predict(input_arr)[0][0]

# Print the prediction
print(f"The predicted class is: {pred}")

# Interpret the prediction
if pred == 0:
    print("The MRI is having lungs cancer")
else:
    print("The MRI is not having lungs cancer")



